<?php
/**
 * JSON behavior for cakePHP framework
 * @license MIT
 * @author  Liqueur de Toile <contact@liqueurdetoile.com>
 */
namespace Lqdt\OrmJson\Model\Behavior;

use Adbar\Dot;
use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\Event;
use Cake\ORM\Behavior;
use Cake\ORM\Query;
use Lqdt\OrmJson\ORM\JsonQuery;

/**
 * This CakePHP behavior adds support to performs mysql queries into JSON fields
 *
 * The behavior adds a custom finder <tt>Model::find('json')</tt> that returns a JsonQuery instance
 *
 * You can use any construct similar to classic query building based on field/value array
 * or full query string. The array form automatically escape string type parameters.
 *
 * JSON field name must be called in specific format like this : <tt>path@[Model.]field</tt> and they will be turned
 * into JSON_EXTRACT short notation like <tt>[Model.]fieldname->"$.path"</tt>
 *
 * @version 1.1.0
 * @since   1.0.0
 * @license MIT
 * @author  Liqueur de Toile <contact@liqueurdetoile.com>
 */
class JsonBehavior extends Behavior
{
    /**
     * Create a JsonQuery from existing Gquery object or from scratch
     * @version 1.0.0
     * @since   1.0..
     * @param   Query    $parentQuery  Existing query
     * @return  JsonQuery              JsonQuery instance
     */
    public function jsonQuery(Query $parentQuery = null) : JsonQuery
    {
        $table =  $this->getTable();
        return new JsonQuery($table->getConnection(), $table, $parentQuery);
    }

    /**
     * Custom finder Model::find('json') that lets use JSON inner field key selector
     * and JSON inner field key/value set for WHERE clause
     *
     * @version 1.0.0
     * @since   1.0.0
     * @param   Query     $query   CakePHP Query Object
     * @param   array     $options Options for the finder<br>
     *  <tt>$options = [<br>
     *    'json.fields' => (array|string) Fields/key of JSON type<br>
     *    'json.conditions' => (array|string) Conditions to use in WHERE clause<br>
     *    'json.sort' => (array|string) Condition to use in ORDER BY clause
     *    ...<br>
     *  ]</tt>
     * @return  JsonQuery              Cunstom JsonQuery instance
     */
    public function findJson(Query $query, array $options) : JsonQuery
    {
        $query = $this->jsonQuery($query);

        if (!empty($options['json.fields'])) {
            $query->jsonSelect((array) $options['json.fields']);
            unset($options['json.fields']);
        }

        if (!empty($options['json.conditions'])) {
            $query->jsonWhere((array) $options['json.conditions']);
            unset($options['json.conditions']);
        }

        if (!empty($options['json.sort'])) {
            $query->jsonOrder((array) $options['json.sort']);
            unset($options['json.sort']);
        }

        return $query;
    }

    /**
     * Parse datfield from raw data used in newEntity or PatchEntity methods into nested array values
     *
     * When using patchEntity, a call to jsonMerge must be done to merge old and new values or
     * new data will simply replaces previous one in the JSON field.
     *
     * @version 1.0.0
     * @since   1.1.0
     * @param   Event         $event   Event
     * @param   ArrayObject   $data    Data
     * @param   ArrayObject   $options Options
     * @return  void
     * @see \Lqdt\OrmJson\Model\Entity\JsonTrait::jsonMerge()
     */
    public function beforeMarshal(Event $event, ArrayObject $data, ArrayObject $options) : void
    {
        $dot = new Dot();
        $map = $data->getArrayCopy();

        foreach ($map as $field => $value) {
            // Convert datfield and parse dotfield
            if (false !== strpos($field, '@')) {
                $parts = explode('@', $field);
                $dot->set($parts[1] . '.' . $parts[0], $value);
                $data->offsetUnset($field);
            }
        }

        $dot = $dot->all();
        foreach ($dot as $field => $value) {
            $data[$field] = $value;
        }
    }
}

